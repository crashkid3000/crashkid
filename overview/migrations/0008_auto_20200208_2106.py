# Generated by Django 2.2.9 on 2020-02-08 20:06

from django.db import migrations, models
import django.db.models.deletion
import wagtail.core.fields


class Migration(migrations.Migration):

    dependencies = [
        ('wagtailcore', '0041_group_collection_permissions_verbose_name_plural'),
        ('wagtailimages', '0001_squashed_0021'),
        ('overview', '0007_auto_20200208_1739'),
    ]

    operations = [
        migrations.CreateModel(
            name='FH4TuneOverviewPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('intro', wagtail.core.fields.RichTextField(blank=True, help_text='And intro text to give readers some context', null=True, verbose_name='Intro text')),
            ],
            options={
                'verbose_name': 'FH4 All Tunes Overview',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.AlterModelOptions(
            name='fh4champoverviewpage',
            options={'verbose_name': 'FH4 All Championships Overview'},
        ),
        migrations.AlterModelOptions(
            name='fh4overviewpage',
            options={'verbose_name': 'FH4 All Events Overview'},
        ),
        migrations.AlterField(
            model_name='fh4championship',
            name='type',
            field=models.CharField(choices=[('r', 'Sprint'), ('R', 'Circuit'), ('d', 'Rally'), ('D', 'Dirt Track'), ('c', 'CC Sprint'), ('C', 'CC Circuit'), ('A', 'Asphalt'), ('E', 'Mixed Surface'), ('â‚¬', 'Cross Country'), ('S', 'Street Scene')], help_text='What kind of championship this is', max_length=1, verbose_name='Championship type'),
        ),
        migrations.CreateModel(
            name='FH4Tune',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', help_text='The name of this setup', max_length=50, verbose_name='Tune name')),
                ('tune_type', models.CharField(choices=[('C', 'Asphalt'), ('R', 'Rally'), ('O', 'Offroad'), ('d', 'Drag'), ('D', 'Drift')], default='A', help_text='For what kind of racing this tune was made for', max_length=1, verbose_name='Tune type')),
                ('tune_characteristic', models.CharField(choices=[('S', 'Speed'), ('A', 'Acceleration'), ('a', 'Aerodynamic Grip'), ('G', 'Grip'), ('B', 'Balanced')], default='B', help_text="What's the focus of this setup? Is it grip, or maybe speed?", max_length=1, verbose_name='Tune focus')),
                ('livery_name', models.CharField(blank=True, help_text='The name of the livery that this tune should come with (if available)', max_length=50, null=True, verbose_name='Livery name')),
                ('pi', models.FloatField(help_text='The performance index of this tune', verbose_name='Performance Index')),
                ('speed', models.FloatField(help_text='The maximum speed this car can reach', null=True, verbose_name='Max speed (kph)')),
                ('accel100', models.FloatField(help_text='The time it takes for this car to accelerate from 0 to 100', null=True, verbose_name='0-100kmh Acceleration (s)')),
                ('grip100', models.FloatField(help_text='The grip that the car develops at 100 km/h', null=True, verbose_name='Grip at 100 km/h')),
                ('accel160', models.FloatField(help_text='The time it takes for this car to accelerate from 0 to 160', null=True, verbose_name='0-160kmh Acceleration (s)')),
                ('grip160', models.FloatField(help_text='The grip that the car develops at 160 km/h', null=True, verbose_name='Grip at 160 km/h')),
                ('power', models.IntegerField(help_text='The maximum power output of this car', null=True, verbose_name='Power (kW)')),
                ('torque', models.IntegerField(help_text='The maximum torque output of this car', null=True, verbose_name='Torque (Nm)')),
                ('intake', models.CharField(help_text='If/How extra air is forced into the engine', max_length=1, null=True, verbose_name='Intake type')),
                ('weight', models.IntegerField(help_text='How much this car weighs', null=True, verbose_name='Weight (kg)')),
                ('weight_distrib', models.IntegerField(blank=True, help_text='How much weight lies on the front axle', null=True, verbose_name='Weight distribution (%)')),
                ('drivetrain', models.CharField(help_text='Where the engine lies and what wheels are driven by it', max_length=1, null=True, verbose_name='Drivetrain')),
                ('rating_speed', models.FloatField(default=0.0, help_text='The Forza-internal speed rating', verbose_name='Speed rating')),
                ('rating_handling', models.FloatField(default=0.0, help_text='The Forza-internal handling rating', verbose_name='Handling rating')),
                ('rating_accel', models.FloatField(default=0.0, help_text='The Forza-internal accelearation rating', verbose_name='Acceleration handling')),
                ('rating_start', models.FloatField(default=0.0, help_text='The Forza-internal start rating', verbose_name='Start rating')),
                ('rating_brakes', models.FloatField(default=0.0, help_text='The Forza-internal brakes rating', verbose_name='Brakes rating')),
                ('preview_image', models.ForeignKey(blank=True, help_text='An Image of the car that this livery comes with', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Car preview')),
            ],
            options={
                'verbose_name': 'Forza Setup',
            },
        ),
    ]
