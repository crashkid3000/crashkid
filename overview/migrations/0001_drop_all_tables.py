# Generated by Django 2.2.9 on 2020-02-03 14:48

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailimages', '0001_squashed_0021'),
        ('wagtailcore', '0041_group_collection_permissions_verbose_name_plural'),
    ]

    operations = [
        migrations.CreateModel(
            name='FH4OverviewPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='FH4Route',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('r', 'Sprint'), ('R', 'Circuit'), ('d', 'Rally'), ('D', 'Dirt Track'), ('c', 'CC Sprint'), ('C', 'CC Circuit')], help_text='What kind of race this is', max_length=1, verbose_name='Track type')),
                ('length_per_round', models.FloatField(help_text='The length (in km) per lap (for circuits)/per race (for sprints)', verbose_name='Lap length')),
                ('name', models.CharField(default='DEFAULT', help_text='Name of the route', max_length=35, verbose_name='Route name')),
                ('track_image', models.ForeignKey(help_text='overview image of the track', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='track image')),
            ],
            options={
                'verbose_name': 'FH4 Route',
            },
        ),
        migrations.CreateModel(
            name='FH4Track',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the event', max_length=50, verbose_name='Event name')),
                ('car_power', models.CharField(choices=[('X', 'X class'), ('2', 'S2 class'), ('1', 'S1 class'), ('A', 'A class'), ('B', 'B class'), ('C', 'C class'), ('D', 'D class'), ('-', 'Not restricted')], default='-', help_text='The recommended/restricted car class for this event', max_length=1, null=True, verbose_name='Power limit')),
                ('description', models.CharField(blank=True, help_text='Some descriptive text to further inform about the track/event', max_length=300, null=True, verbose_name='Event/Track description')),
                ('laps', models.IntegerField(default=1, help_text='How many laps? Note: Use 0 for sprints', null=True, verbose_name='Lap count')),
                ('season', models.CharField(choices=[('W', 'Winter'), ('F', 'Spring'), ('S', 'Summer'), ('H', 'Autumn')], help_text='In which season this event takes place', max_length=1, verbose_name='Season')),
                ('car_class', models.CharField(blank=True, default='Anything Goes', help_text='Which cars are allowed for this race', max_length=250, verbose_name='Car restriction')),
                ('time_of_day', models.CharField(choices=[('Da', 'Dawn'), ('Su', 'Sunrise'), ('Mo', 'Morning'), ('No', 'Noon'), ('Af', 'Afternoon'), ('Se', 'Sunset'), ('Du', 'Dusk'), ('Ni', 'Night')], default='No', help_text='When this race takes place', max_length=2, verbose_name='Time of day')),
                ('weather', models.CharField(choices=[('S ', 'Sunny'), ('Sr', 'Sunny (wet)'), ('C ', 'Cloudy'), ('Cr', 'Cloudy (wet)'), ('O ', 'Overcast'), ('Lr', 'Light rain/snow'), ('Hr', 'Heavy rain/snow'), ('FB', 'Foggy/Blizzard')], default='S ', help_text='What kind of weather will be present at the event', max_length=30)),
                ('sharecode', models.IntegerField(default=0, help_text='The share code for that event', verbose_name='Share code')),
                ('event_image', models.ForeignKey(blank=True, help_text='The fancy image for an event (if available)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='event image')),
                ('track', models.ForeignKey(help_text='The track on which this event takes place', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='overview.FH4Route', verbose_name='Track')),
            ],
            options={
                'verbose_name': 'FH4 Track med',
            },
        ),
    ]
